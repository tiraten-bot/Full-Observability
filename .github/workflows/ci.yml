# ==============================================================================
# CONTINUOUS INTEGRATION (CI) PIPELINE
# ==============================================================================
# Purpose: Build, test, and validate code on every push/PR
# Triggers: push to main/develop, pull requests
# ==============================================================================

name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'
  DOCKER_REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  # ============================================================================
  # JOB 1: CODE QUALITY & LINTING
  # ============================================================================
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
      
      - name: Check Go formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run: gofmt -s -w ."
            gofmt -s -l .
            exit 1
          fi
      
      - name: Go vet
        run: go vet ./...
      
      - name: Check Go mod tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  # ============================================================================
  # JOB 2: UNIT TESTS
  # ============================================================================
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        service: [user, product, inventory, payment]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Download dependencies
        run: go mod download
      
      - name: Run tests for ${{ matrix.service }} service
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic \
            ./cmd/${{ matrix.service }}/... \
            ./internal/${{ matrix.service }}/...
      
      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out
          flags: ${{ matrix.service }}-service
          name: ${{ matrix.service }}-coverage
      
      - name: Archive coverage report
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-coverage
          path: coverage.html

  # ============================================================================
  # JOB 3: BUILD DOCKER IMAGES
  # ============================================================================
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        service: [user, product, inventory, payment, gateway]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: github.event_name != 'pull_request'
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ matrix.service }}-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./dockerfiles/${{ matrix.service == 'gateway' && 'gateway' || matrix.service }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

  # ============================================================================
  # JOB 4: SECURITY SCAN
  # ============================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    
    strategy:
      matrix:
        service: [user, product, inventory, payment, gateway]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ matrix.service }}-service:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: 'trivy-results.sarif'
        if: always()

  # ============================================================================
  # JOB 5: VALIDATE KUBERNETES MANIFESTS
  # ============================================================================
  validate-k8s:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Kubernetes tools
        uses: azure/setup-kubectl@v3
      
      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.13.0'
      
      - name: Lint Helm chart
        run: |
          helm lint helm/full-observability
          helm lint helm/full-observability --values helm/values-dev.yaml
          helm lint helm/full-observability --values helm/values-staging.yaml
          helm lint helm/full-observability --values helm/values-prod.yaml
      
      - name: Template and validate
        run: |
          # Create manifests with proper error handling
          helm template full-observability helm/full-observability \
            --values helm/values-dev.yaml \
            --namespace observability \
            --debug \
            > /tmp/manifests.yaml 2>/tmp/helm-errors.log || {
              echo "❌ Helm template failed:"
              cat /tmp/helm-errors.log
              exit 1
            }
          
          # Validate manifests
          kubectl --dry-run=client apply -f /tmp/manifests.yaml || {
            echo "❌ Kubernetes validation failed"
            exit 1
          }
          
          echo "✅ All manifests validated successfully"

  # ============================================================================
  # JOB 6: NOTIFY
  # ============================================================================
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [lint, test, build, security, validate-k8s]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          echo "CI Pipeline completed"
          echo "Status: ${{ job.status }}"

