# ==============================================================================
# RELEASE AUTOMATION
# ==============================================================================
# Purpose: Create releases with semantic versioning
# Triggers: Tag push (v*.*.*)
# ==============================================================================

name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true

jobs:
  # ============================================================================
  # JOB 1: CREATE RELEASE
  # ============================================================================
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
      
      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Images
            
            ```bash
            docker pull docker.io/${{ secrets.DOCKER_USERNAME }}/user-service:${{ steps.version.outputs.version }}
            docker pull docker.io/${{ secrets.DOCKER_USERNAME }}/product-service:${{ steps.version.outputs.version }}
            docker pull docker.io/${{ secrets.DOCKER_USERNAME }}/inventory-service:${{ steps.version.outputs.version }}
            docker pull docker.io/${{ secrets.DOCKER_USERNAME }}/payment-service:${{ steps.version.outputs.version }}
            docker pull docker.io/${{ secrets.DOCKER_USERNAME }}/api-gateway:${{ steps.version.outputs.version }}
            ```
            
            ## Deployment
            
            ```bash
            helm upgrade full-observability ./helm/full-observability \
              --set userService.image.tag=${{ steps.version.outputs.version }} \
              --namespace observability
            ```
          draft: false
          prerelease: false

  # ============================================================================
  # JOB 2: BUILD AND PUSH RELEASE IMAGES
  # ============================================================================
  build-release:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: create-release
    
    strategy:
      matrix:
        service: [user, product, inventory, payment, gateway]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./dockerfiles/${{ matrix.service }}.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-service:${{ needs.create-release.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # JOB 3: UPDATE HELM CHART VERSION
  # ============================================================================
  update-chart:
    name: Update Helm Chart
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Update Chart.yaml
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          VERSION_NO_V=${VERSION#v}
          
          sed -i "s/^version:.*/version: ${VERSION_NO_V}/" helm/full-observability/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${VERSION_NO_V}\"/" helm/full-observability/Chart.yaml
      
      - name: Package Helm chart
        run: |
          helm package helm/full-observability
      
      - name: Upload Helm chart
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart
          path: full-observability-*.tgz

  # ============================================================================
  # JOB 4: DEPLOY TO PRODUCTION
  # ============================================================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-release, update-chart]
    environment:
      name: production
      url: https://api.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}
      
      - name: Deploy with Helm
        run: |
          helm upgrade --install full-observability ./helm/full-observability \
            --namespace observability \
            --values helm/values-prod.yaml \
            --set userService.image.tag=${{ needs.create-release.outputs.version }} \
            --set productService.image.tag=${{ needs.create-release.outputs.version }} \
            --set inventoryService.image.tag=${{ needs.create-release.outputs.version }} \
            --set paymentService.image.tag=${{ needs.create-release.outputs.version }} \
            --set apiGateway.image.tag=${{ needs.create-release.outputs.version }} \
            --wait \
            --timeout 20m
      
      - name: Verify deployment
        run: |
          kubectl get pods -n observability
          kubectl rollout status deployment/user-service -n observability
          kubectl rollout status deployment/payment-service -n observability

